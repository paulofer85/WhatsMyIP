<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="59f4f6c1-132b-4c27-b8b5-1946b720cfe1" name="paulo@PAULO-HP 2014-03-15 14:03:25" runUser="paulo-HP\paulo" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="6cbb6e20-5e4b-4b57-a53a-816d3f4418ad">
    <Description>These are default test settings for a local test run.</Description>
    <Deployment enabled="false" runDeploymentRoot="paulo_PAULO-HP 2014-03-15 14_03_25">
      <DeploymentItem filename="C:\Users\paulo\Documents\Visual Studio 2010\Projects\WhatsMyIpSpammer\BusinessLogicWhatsMyIp\bin\Debug\BusinessLogicWhatsMyIp.dll" />
      <DeploymentItem filename="C:\Users\paulo\Documents\Visual Studio 2010\Projects\WhatsMyIpSpammer\SvcIP\bin\Debug\SvcIP.exe" />
      <DeploymentItem filename="C:\Users\paulo\Documents\Visual Studio 2010\Projects\WhatsMyIpSpammer\Common\bin\Debug\Common.dll" />
    </Deployment>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
  </TestSettings>
  <Times creation="2014-03-15T14:03:25.9093324-03:00" queuing="2014-03-15T14:03:26.3043550-03:00" start="2014-03-15T14:03:26.3813594-03:00" finish="2014-03-15T14:03:28.8024979-03:00" />
  <ResultSummary outcome="Failed">
    <Counters total="1" executed="1" error="0" failed="1" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <UnitTest name="SendMailTest" storage="c:\users\paulo\documents\visual studio 2010\projects\whatsmyipspammer\testwhatsmyip\bin\debug\testwhatsmyip.dll" id="6195fb63-df6d-b0f3-ccc8-709c4fba0e33">
      <Execution id="96c15609-1389-4c3e-947e-c9a0fc28bbd4" />
      <TestMethod codeBase="C:/Users/paulo/Documents/Visual Studio 2010/Projects/WhatsMyIpSpammer/TestWhatsMyIP/bin/Debug/TestWhatsMyIP.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="TestWhatsMyIP.UtilsTest, TestWhatsMyIP, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="SendMailTest" />
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry testId="6195fb63-df6d-b0f3-ccc8-709c4fba0e33" executionId="96c15609-1389-4c3e-947e-c9a0fc28bbd4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <UnitTestResult executionId="96c15609-1389-4c3e-947e-c9a0fc28bbd4" testId="6195fb63-df6d-b0f3-ccc8-709c4fba0e33" testName="SendMailTest" computerName="PAULO-HP" duration="00:00:01.7731034" startTime="2014-03-15T14:03:26.3963602-03:00" endTime="2014-03-15T14:03:28.7294937-03:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="96c15609-1389-4c3e-947e-c9a0fc28bbd4">
      <Output>
        <ErrorInfo>
          <Message>Test method TestWhatsMyIP.UtilsTest.SendMailTest threw exception: 
System.Security.Authentication.AuthenticationException: El certificado remoto no es válido según el procedimiento de validación.</Message>
          <StackTrace>    en System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, Exception exception)
   en System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)
   en System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult lazyResult)
   en System.Net.TlsStream.CallProcessAuthentication(Object state)
   en System.Threading.ExecutionContext.runTryCode(Object userData)
   en System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(TryCode code, CleanupCode backoutCode, Object userData)
   en System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)
   en System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean ignoreSyncCtx)
   en System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)
   en System.Net.TlsStream.ProcessAuthentication(LazyAsyncResult result)
   en System.Net.TlsStream.Write(Byte[] buffer, Int32 offset, Int32 size)
   en System.Net.PooledStream.Write(Byte[] buffer, Int32 offset, Int32 size)
   en System.Net.Mail.SmtpConnection.Flush()
   en System.Net.Mail.ReadLinesCommand.Send(SmtpConnection conn)
   en System.Net.Mail.EHelloCommand.Send(SmtpConnection conn, String domain)
   en System.Net.Mail.SmtpConnection.GetConnection(ServicePoint servicePoint)
   en System.Net.Mail.SmtpTransport.GetConnection(ServicePoint servicePoint)
   en System.Net.Mail.SmtpClient.GetConnection()
   en System.Net.Mail.SmtpClient.Send(MailMessage message)
   en Common.MailUtils.SendEmail(SMTPEmail email) en C:\Users\paulo\Documents\Visual Studio 2010\Projects\WhatsMyIpSpammer\Common\MailUtils.cs:línea 54
   en TestWhatsMyIP.UtilsTest.SendMailTest() en C:\Users\paulo\Documents\Visual Studio 2010\Projects\WhatsMyIpSpammer\TestWhatsMyIP\UtilsTest.cs:línea 34
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
  </Results>
</TestRun>